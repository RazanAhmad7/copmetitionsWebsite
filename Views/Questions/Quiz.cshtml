@model List<CompetitionsWebsite.ViewModels.QuizQuestionViewModel>

@{
    ViewData["Title"] = "المسابقة - مسابقات تعليمية إسلامية";
    Layout = null;
}
@using System.Text.Json

<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="../css/site.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <style>
        .timer-container {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1000;
            background: var(--white);
            border: 2px solid var(--primary-color);
            border-radius: 8px;
            padding: 15px 20px;
            box-shadow: var(--shadow);
            color: var(--text-primary);
            font-weight: bold;
            display: flex;
            align-items: center;
            gap: 10px;
            animation: pulse 2s infinite;
        }

        .timer-icon {
            font-size: 1.2em;
            color: var(--primary-color);
        }

        .timer-text {
            font-size: 1.1em;
            color: var(--text-primary);
        }

        .timer-warning {
            background: var(--white);
            border-color: var(--error-color);
            color: var(--error-color);
            animation: shake 0.5s infinite;
        }

        .timer-warning .timer-icon {
            color: var(--error-color);
        }

        @@keyframes pulse {
            0% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.05);
            }
            100% {
                transform: scale(1);
            }
        }

        @@keyframes shake {
            0%, 100% {
                transform: translateX(0);
            }
            25% {
                transform: translateX(-2px);
            }
            75% {
                transform: translateX(2px);
            }
        }

        .timer-circle {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: conic-gradient(var(--primary-color) 0deg, var(--primary-color) 0deg, var(--primary-light) 0deg);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.9em;
            font-weight: bold;
            color: var(--white);
            border: 2px solid var(--primary-color);
            transition: background 0.1s ease;
        }

        .timer-warning .timer-circle {
            background: conic-gradient(var(--error-color) 0deg, var(--error-color) 0deg, #ffebee 0deg);
            border-color: var(--error-color);
        }
    </style>
</head>
<body>
    <header>
        <nav class="main-nav" style="background:#4caf50; padding:10px 30px;">
            <div class="logo" style="color:white; font-weight:bold; font-size:1.5em;">
                مسابقات تعليمية
            </div>
            <div class="nav-links" style="margin-top:5px;">
                <a href="@Url.Action("Index", "Home")" style="color:white; margin-left:15px; text-decoration:none;">الرئيسية</a>
                <a href="@Url.Action("Login", "Auth")" style="color:white; margin-left:15px; text-decoration:none;">تسجيل الدخول</a>
                <a href="@Url.Action("Profile", "Profile")" style="color:white; text-decoration:none;">الملف الشخصي</a>
            </div>
        </nav>
    </header>

    <!-- Timer -->
    <div class="timer-container" id="timerContainer">
        <i class="fas fa-clock timer-icon"></i>
        <div class="timer-circle" id="timerCircle">
            <span id="timerText">60</span>
        </div>
        <div class="timer-text">ثانية</div>
    </div>

    <main>
        <div class="quiz-container">
            <div class="quiz-header">
                <h2 id="quizTitle">المسابقة: @ViewBag.CategoryName - المستوى: @ViewBag.Level</h2>
                <div class="progress-bar">
                    <div class="progress-bar-fill" style="width: 0%"></div>
                </div>
            </div>

            <div id="questionContainer">
                <!-- سيتم عرض السؤال هنا -->
            </div>

            <div class="quiz-controls">
                <button class="btn" id="nextQuestion">التالي</button>
            </div>
        </div>
    </main>

    <footer>
        <p>جميع الحقوق محفوظة © 2024</p>
    </footer>

    <script>
        // بيانات الأسئلة من السيرفر
        window.questionsFromServer = @Html.Raw(Json.Serialize(Model));

        let currentQuestion = 0;
        let score = 0;
        let userResponses = []; // ✅ هنا التعديل

        // متغيرات المؤقت
        let timeLeft = 60; // 60 ثانية
        let timerInterval;
        let quizEnded = false;

        // تعريف درجات الألوان المختلفة
        const colorShades = [
            { bg: "#FFF3E0", border: "#FF9800" }, // برتقالي فاتح
            { bg: "#F3E5F5", border: "#9C27B0" }, // بنفسجي فاتح
            { bg: "#FFEBEE", border: "#F44336" }, // أحمر فاتح
            { bg: "#E0F7FA", border: "#00BCD4" }, // سماوي فاتح
            { bg: "#F1F8E9", border: "#8BC34A" }, // أخضر مصفر
            { bg: "#FFF8E1", border: "#FFC107" }, // أصفر فاتح
            { bg: "#E8EAF6", border: "#3F51B5" }, // نيلي فاتح
            { bg: "#FCE4EC", border: "#E91E63" }, // وردي فاتح
        ];

        const questions = window.questionsFromServer;

        // بدء المؤقت
        function startTimer() {
            timerInterval = setInterval(() => {
                if (quizEnded) {
                    clearInterval(timerInterval);
                    return;
                }

                timeLeft--;
                updateTimerDisplay();

                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    timeUp();
                }
            }, 1000);
        }

        // تحديث عرض المؤقت
        function updateTimerDisplay() {
            const timerText = document.getElementById('timerText');
            const timerCircle = document.getElementById('timerCircle');
            const timerContainer = document.getElementById('timerContainer');
            
            timerText.textContent = timeLeft;
            
            // تحديث الدائرة التقدمية
            const progress = ((60 - timeLeft) / 60) * 360;
            if (timeLeft <= 10) {
                timerCircle.style.background = `conic-gradient(var(--error-color) ${progress}deg, #ffebee ${progress}deg)`;
            } else {
                timerCircle.style.background = `conic-gradient(var(--primary-color) ${progress}deg, var(--primary-light) ${progress}deg)`;
            }
            
            // تحذير عند وصول 10 ثواني
            if (timeLeft <= 10) {
                timerContainer.classList.add('timer-warning');
            }
        }

        // عند انتهاء الوقت
        function timeUp() {
            quizEnded = true;
            showResults();
        }

        // دالة خلط مصفوفة (Fisher-Yates)
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        // عرض السؤال الحالي حسب النوع
        function showQuestion() {
            const container = document.getElementById("questionContainer");
            container.innerHTML = "";

            if (currentQuestion >= questions.length) {
                showResults();
                return;
            }

            const question = questions[currentQuestion];

            // بناء هيكل السؤال حسب النوع
            const questionBox = document.createElement("div");
            questionBox.className = "question-type";

            // عنوان السؤال
            const questionText = document.createElement("div");
            questionText.className = "question-text";
            questionText.textContent = question.text;
            questionBox.appendChild(questionText);

            if (question.type.toLowerCase() === "mcq") {
                const optionsContainer = document.createElement("div");
                optionsContainer.className = "options-container";

                question.options.forEach((opt, idx) => {
                    const option = document.createElement("div");
                    option.className = "option";
                    option.textContent = opt;
                    option.dataset.index = idx;
                    option.addEventListener("click", () => selectOption(option));
                    optionsContainer.appendChild(option);
                });

                questionBox.appendChild(optionsContainer);
            }
            else if (question.type.toLowerCase() === "matching") {
                const matchingContainer = document.createElement("div");
                matchingContainer.className = "matching-container";

                // عمود الكلمات
                const rightColumn = document.createElement("div");
                rightColumn.className = "matching-column fixed-column";

                // عمود التعريفات (مختلط)
                const leftColumn = document.createElement("div");
                leftColumn.className = "matching-column movable-column";

                let selectedWord = null;
                let selectedDefinition = null;
                let matchCount = 0;

                // الكلمات (items)
                question.items.forEach(item => {
                    const wordDiv = document.createElement("div");
                    wordDiv.className = "matching-item word-item";
                    wordDiv.textContent = item.text;
                    wordDiv.dataset.word = item.text;

                    wordDiv.addEventListener("click", () => {
                        if (wordDiv.classList.contains("matched")) return;

                        // إزالة التحديد من غيره
                        [...rightColumn.querySelectorAll(".selected")].forEach(el => {
                            if (el !== wordDiv) el.classList.remove("selected");
                        });

                        if (wordDiv.classList.contains("selected")) {
                            wordDiv.classList.remove("selected");
                            selectedWord = null;
                        } else {
                            wordDiv.classList.add("selected");
                            selectedWord = wordDiv;
                        }

                        checkMatch();
                    });

                    rightColumn.appendChild(wordDiv);
                });

                // تعريفات (matches) مخلوطة
                const shuffledMatches = shuffleArray([...question.matches]);

                shuffledMatches.forEach(match => {
                    const defDiv = document.createElement("div");
                    defDiv.className = "matching-item definition-item";
                    defDiv.textContent = match.text;
                    defDiv.dataset.definition = match.text;

                    defDiv.addEventListener("click", () => {
                        if (defDiv.classList.contains("matched")) return;

                        // إزالة التحديد من غيره
                        [...leftColumn.querySelectorAll(".selected")].forEach(el => {
                            if (el !== defDiv) el.classList.remove("selected");
                        });

                        if (defDiv.classList.contains("selected")) {
                            defDiv.classList.remove("selected");
                            selectedDefinition = null;
                        } else {
                            defDiv.classList.add("selected");
                            selectedDefinition = defDiv;
                        }

                        checkMatch();
                    });

                    leftColumn.appendChild(defDiv);
                });

                function checkMatch() {
                    if (!selectedWord || !selectedDefinition) return;

                    const randomColor = colorShades[Math.floor(Math.random() * colorShades.length)];

                    selectedWord.classList.add("matched");
                    selectedDefinition.classList.add("matched");

                    selectedWord.style.backgroundColor = randomColor.bg;
                    selectedWord.style.border = `2px solid ${randomColor.border}`;
                    selectedDefinition.style.backgroundColor = randomColor.bg;
                    selectedDefinition.style.border = `2px solid ${randomColor.border}`;

                    // حفظ الكلمة والتعريف في خصائص data لتقييمهم لاحقًا
                    selectedWord.dataset.matchedWith = selectedDefinition.dataset.definition;

                    selectedWord.classList.remove("selected");
                    selectedDefinition.classList.remove("selected");

                    selectedWord = null;
                    selectedDefinition = null;
                }


                matchingContainer.appendChild(leftColumn);
                matchingContainer.appendChild(rightColumn);
                questionBox.appendChild(matchingContainer);
            }
            else if (question.type.toLowerCase() === "spelling") {
                const wordBuildingContainer = document.createElement("div");
                wordBuildingContainer.className = "word-building-container";

                const wordPreview = document.createElement("div");
                wordPreview.className = "word-preview";
                wordPreview.id = "wordPreview"; // أفضل لإمكانية الوصول لاحقًا

                const shuffledLetters = shuffleArray([...question.letters]);

                shuffledLetters.forEach(letter => {
                    const letterBox = document.createElement("div");
                    letterBox.className = "letter-box";
                    letterBox.textContent = letter;

                    letterBox.addEventListener("click", () => {
                        wordPreview.textContent += letterBox.textContent;
                        letterBox.style.visibility = "hidden";
                    });

                    wordBuildingContainer.appendChild(letterBox);
                });

                questionBox.appendChild(wordBuildingContainer);
                questionBox.appendChild(wordPreview);
            }

            else {
                // نوع سؤال غير معروف
                questionBox.innerHTML += "<p>نوع السؤال غير مدعوم</p>";
            }

            container.appendChild(questionBox);

            // تحديث شريط التقدم
            const progress = ((currentQuestion + 1) / questions.length) * 100;
            document.querySelector(".progress-bar-fill").style.width = progress + "%";
        }

        // التعامل مع اختيار خيار في mcq
        function selectOption(option) {
            // إزالة تحديد من كل الخيارات
            document.querySelectorAll(".option").forEach(opt => opt.classList.remove("selected"));
            option.classList.add("selected");
        }

        function nextQuestion() {
            if (quizEnded) return;

            const question = questions[currentQuestion];

            if (question.type.toLowerCase() === "mcq") {
                const selectedOption = document.querySelector(".option.selected");
                let isCorrect = false;
                let answerText = "";

                if (selectedOption) {
                    const selectedIndex = parseInt(selectedOption.dataset.index);
                    answerText = selectedOption.textContent;
                    isCorrect = selectedIndex === question.correctOptionIndex;

                    if (isCorrect) score++;
                }

                userResponses.push({
                    questionId: question.id,
                    userResponse: answerText,
                    isCorrect: isCorrect,
                    questionType: "mcq"
                });
            }
            else if (question.type.toLowerCase() === "matching") {
                let correctMatches = 0;
                const matches = [];

                question.items.forEach((item, index) => {
                    const wordEl = [...document.querySelectorAll(".word-item")].find(el => el.dataset.word === item.text);
                    const matchedDef = wordEl?.dataset.matchedWith;
                    const correctDef = question.matches[index]?.text;

                    matches.push(`${item.text} => ${matchedDef}`);
                    if (matchedDef === correctDef) correctMatches++;
                });

                const isCorrect = correctMatches === question.items.length;
                if (isCorrect) score++;

                userResponses.push({
                    questionId: question.id,
                    userResponse: matches.join(", "),
                    isCorrect: isCorrect,
                    questionType: "matching"
                });
            }
            else if (question.type.toLowerCase() === "spelling") {
                const userAnswer = document.getElementById("wordPreview")?.textContent.trim().toLowerCase();
                const correctAnswer = question.correctWord?.trim().toLowerCase();
                const isCorrect = userAnswer === correctAnswer;
                if (isCorrect) score++;

                userResponses.push({
                    questionId: question.id,
                    userResponse: userAnswer,
                    isCorrect: isCorrect,
                    questionType: "spelling"
                });
            }

            currentQuestion++;
            if (currentQuestion < questions.length) {
                showQuestion();
            } else {
                showResults();
            }
        }

        // عرض النتيجة النهائية
        function showResults() {
            quizEnded = true;
            clearInterval(timerInterval);

            const container = document.getElementById("questionContainer");
            container.innerHTML = `
                <h2>انتهت المسابقة!</h2>
                <p>النتيجة النهائية: ${score} من ${questions.length}</p>
                <button class="btn" onclick="location.reload()">إعادة المسابقة</button>
            `;

            document.querySelector(".progress-bar-fill").style.width = "100%";
            document.getElementById("nextQuestion").style.display = "none";
            document.getElementById("timerContainer").style.display = "none";

            // إرسال البيانات
            fetch('/Questions/SaveResult', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({
                    categoryId: questions[currentQuestion-1].categoryId,
                    level: questions[currentQuestion-1].level,
                    score: score,
                    userResponses: userResponses  // تأكدي من الاسم
                })

            }).then(response => {
                if (!response.ok) throw new Error("خطأ أثناء الحفظ");
                return response.json();
            }).then(data => {
                console.log("تم حفظ محاولة المستخدم بنجاح");
            }).catch(error => {
                console.error("خطأ:", error);
            });
        }

        // تشغيل أول سؤال عند تحميل الصفحة
        document.addEventListener("DOMContentLoaded", () => {
            showQuestion();
            startTimer(); // بدء المؤقت
            document.getElementById("nextQuestion").addEventListener("click", nextQuestion);
        });
    </script>
</body>
</html>