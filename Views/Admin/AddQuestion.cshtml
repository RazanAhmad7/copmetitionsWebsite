@model CompetitionsWebsite.ViewModels.QuestionInputViewModel

@{
    ViewData["Title"] = "لوحة التحكم - مسابقات تعليمية إسلامية";
  
}

<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <style>
        /* All your previous CSS styles remain the same */
        .admin-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 2rem;
        }

        .admin-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .admin-tabs {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .admin-tab {
            padding: 1rem 2rem;
            background: var(--light-bg);
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .admin-tab.active {
                background: var(--primary-color);
                color: var(--white);
            }

        .admin-content {
            background: var(--white);
            padding: 2rem;
            border-radius: 8px;
            box-shadow: var(--shadow);
        }

        .question-form {
            display: grid;
            gap: 1.5rem;
        }

        .form-group {
            display: grid;
            gap: 0.5rem;
        }

            .form-group label {
                font-weight: bold;
                color: var(--text-color);
            }

            .form-group input,
            .form-group textarea,
            .form-group select {
                padding: 0.8rem;
                border: 2px solid var(--primary-color);
                border-radius: 4px;
                font-size: 1rem;
            }

            .form-group textarea {
                min-height: 100px;
                resize: vertical;
            }

        .options-list {
            display: grid;
            gap: 1rem;
        }

        .option-item {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

            .option-item input {
                flex: 1;
            }

            .option-item button {
                padding: 0.5rem;
                background: #ff4444;
                color: var(--white);
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }

        .add-option {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background: var(--secondary-color);
            color: var(--white);
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .elements-list {
            display: grid;
            gap: 1rem;
        }

        .elements-card {
            background: var(--light-bg);
            padding: 1.5rem;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .element-info {
            flex: 1;
        }

        .element-actions {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            padding: 0.5rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            color: var(--white);
        }
        .show-btn {
            background-color: #17a2b8; /* أزرق معلوماتي */
        }
        .edit-btn {
            background: var(--primary-color);
        }

        .delete-btn {
            background: #ff4444;
        }

        .matching-pairs {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
        }

        .matching-column {
            display: grid;
            gap: 1rem;
        }

        .word-building-letters {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .letter-input {
            width: 50px;
            height: 50px;
            text-align: center;
            font-size: 1.5rem;
            border: 2px solid var(--primary-color);
            border-radius: 4px;
        }

        .toast {
            visibility: hidden;
            min-width: 200px;
            background-color: #4CAF50;
            color: white;
            text-align: center;
            border-radius: 8px;
            padding: 16px;
            position: fixed;
            z-index: 9999;
            top: 30px;
            right: 30px;
            font-size: 16px;
            opacity: 0;
            transition: opacity 0.5s ease-in-out, visibility 0.5s;
        }

            .toast.show {
                visibility: visible;
                opacity: 1;
            }
    </style>
</head>
<body>
   

    <main>
        <div class="admin-container">
            <div class="admin-header">
                <h2>لوحة التحكم</h2>
                <button class="btn" id="addQuestionBtn">إضافة سؤال جديد</button>
                <button class="btn" id="addCategoryBtn" style="display:none;">إضافة قسم جديد</button>
            </div>

            <div class="admin-tabs">
                <button class="admin-tab active" data-tab="questions">الأسئلة</button>
                <button class="admin-tab" data-tab="categories">الأقسام</button>
                <button class="admin-tab" data-tab="users">المستخدمين</button>
            </div>


            <div class="admin-content">

                <form asp-action="SaveQuestion" asp-controller="Admin" method="post" class="question-form" id="questionForm" >
                    <input type="hidden" id="questionId" name="Id" value="0">

                    <div class="form-group">
                        <label for="questionType">نوع السؤال</label>
                        <select id="questionType" name="Type" required>
                            <option value="multipleChoice">اختيار من متعدد</option>
                            <option value="matching">توصيل</option>
                            <option value="wordBuilding">تركيب كلمات</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="questionText">نص السؤال</label>
                        <textarea id="questionText" name="Text" required></textarea>
                    </div>

                    <div class="form-group">
                        <label for="questionCategory">القسم</label>
                        <select id="questionCategory" name="Category" required>
                            <option value="القرآن الكريم">القرآن الكريم</option>
                            <option value="السنة النبوية">السنة النبوية</option>
                            <option value="العقيدة">العقيدة</option>
                            <option value="الثقافة الإسلامية">الثقافة الإسلامية</option>
                            <option value="الفقه">الفقه</option>
                            <option value="الألغاز">الألغاز</option>
                        </select>
                    </div>

                    <!-- Multiple Choice Options -->
                    <div id="multipleChoiceOptions" class="form-group">
                        <label>الخيارات</label>
                        <div class="options-list" id="optionsContainer">
                            <div class="option-item">
                                <input type="text" name="Options" placeholder="الخيار الأول" required>
                                <input type="radio" name="correctAnswer" value="0" required>
                                <button type="button" class="remove-option">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <button type="button" class="add-option" id="addOptionBtn">
                            <i class="fas fa-plus"></i>
                            إضافة خيار
                        </button>
                    </div>

                    <!-- Matching Pairs -->
                    <div id="matchingPairs" class="form-group" style="display: none">
                        <label>أزواج التوصيل</label>
                        <div class="matching-pairs">
                            <div class="matching-column">
                                <h4>العناصر</h4>
                                <div class="matching-items" id="matchingItemsContainer">
                                    <input type="text" name="MatchingItems" placeholder="العنصر الأول" >
                                </div>
                                <button type="button" class="add-option" id="addMatchingItemBtn">
                                    <i class="fas fa-plus"></i>
                                    إضافة عنصر
                                </button>
                            </div>
                            <div class="matching-column">
                                <h4>الإجابات</h4>
                                <div class="matching-answers" id="matchingAnswersContainer">
                                    <input type="text" name="MatchingAnswers" placeholder="الإجابة الأولى" >
                                </div>
                                <button type="button" class="add-option" id="addMatchingAnswerBtn">
                                    <i class="fas fa-plus"></i>
                                    إضافة إجابة
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Word Building -->
                    <div id="wordBuildingLetters" class="form-group" style="display: none">
                        <label>الحروف</label>
                        <div class="word-building-letters">
                            <input type="text" class="letter-input" name="Letters" maxlength="1" >
                            <input type="text" class="letter-input" name="Letters" maxlength="1" >
                            <input type="text" class="letter-input" name="Letters" maxlength="1" >
                            <input type="text" class="letter-input" name="Letters" maxlength="1" >
                            <input type="text" class="letter-input" name="Letters" maxlength="1" >
                        </div>
                        <div class="form-group">
                            <label for="correctWord">الكلمة الصحيحة</label>
                            <input type="text" id="correctWord" name="CorrectWord" >
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn">حفظ السؤال</button>
                        <button type="button" class="btn" id="cancelBtn" style="background: #ff4444">
                            إلغاء
                        </button>
                    </div>
                </form>

            </div>
        </div>
    </main>

    <footer>
        <p>جميع الحقوق محفوظة © @DateTime.Now.Year</p>
    </footer>
    <div id="toast" class="toast">تم حفظ السؤال بنجاح!</div>

    <script>
      
            

        // Admin Panel State
        let isEditing = false;
        let currentQuestionId = null;

        // DOM Elements
        const addQuestionBtn = document.getElementById("addQuestionBtn");
        const questionForm = document.querySelector(".question-form");
        const questionsList = document.querySelector(".elements-list");
        const questionTypeSelect = document.getElementById("questionType");
        const multipleChoiceOptions = document.getElementById("multipleChoiceOptions");
        const matchingPairs = document.getElementById("matchingPairs");
        const wordBuildingLetters = document.getElementById("wordBuildingLetters");

        // Event Listeners
        document.addEventListener("DOMContentLoaded", () => {
       
            // Question type change
            questionTypeSelect.addEventListener("change", handleQuestionTypeChange);

            // Form submission
            questionForm.addEventListener("submit", handleFormSubmit);

            // Add option buttons
            document.getElementById("addOptionBtn").addEventListener("click", () => addOption(document.getElementById("addOptionBtn")));
            document.getElementById("addMatchingItemBtn").addEventListener("click", () => addOption(document.getElementById("addMatchingItemBtn")));
            document.getElementById("addMatchingAnswerBtn").addEventListener("click", () => addOption(document.getElementById("addMatchingAnswerBtn")));

            // Remove option buttons (for initial options)
            document.querySelectorAll(".remove-option").forEach((btn) => {
                btn.addEventListener("click", () => removeOption(btn));
            });

          

            // Cancel button
            document.getElementById("cancelBtn").addEventListener("click", () => {
                questionForm.style.display = "none";
                questionsList.style.display = "grid";
            });
        });

      

        // Show question form
        function showQuestionForm() {
            questionsList.style.display = "none";
            questionForm.style.display = "grid";
            isEditing = false;
            currentQuestionId = null;
            questionForm.reset();
            handleQuestionTypeChange();
        }

        // Handle question type change
        function handleQuestionTypeChange() {
            const type = questionTypeSelect.value;

            // Hide all and remove required
            multipleChoiceOptions.style.display = "none";
            matchingPairs.style.display = "none";
            wordBuildingLetters.style.display = "none";

            // remove "required" from all inputs in hidden sections
            document.querySelectorAll("#multipleChoiceOptions input, #matchingPairs input, #wordBuildingLetters input").forEach(input => {
                input.removeAttribute("required");
            });

            // Show and set required only on the relevant section
            if (type === "multipleChoice") {
                multipleChoiceOptions.style.display = "block";
                document.querySelectorAll('#multipleChoiceOptions input[type="text"]').forEach(input => {
                    input.setAttribute("required", "required");
                });
            } else if (type === "matching") {
                matchingPairs.style.display = "block";
                document.querySelectorAll('#matchingPairs input').forEach(input => {
                    input.setAttribute("required", "required");
                });
            } else if (type === "wordBuilding") {
                wordBuildingLetters.style.display = "block";
                document.querySelectorAll('#wordBuildingLetters input').forEach(input => {
                    input.setAttribute("required", "required");
                });
            }
        }


        function addOption(button) {
            const container = button.closest(".form-group");
            const optionsList = container.querySelector(".options-list, .matching-items, .matching-answers");

            const optionCount = optionsList.querySelectorAll(".option-item").length;

            const optionItem = document.createElement("div");
            optionItem.className = "option-item";

            if (container.id === "multipleChoiceOptions") {
                optionItem.innerHTML = `
                    <input type="text" name="Options" placeholder="الخيار الجديد" required>
                    <input type="radio" name="correctAnswer" value="${optionCount}" required>
                    <button type="button" class="remove-option"><i class="fas fa-times"></i></button>
                `;
            } else if (container.id === "matchingPairs") {
                if (button.id === "addMatchingItemBtn") {
                    optionItem.innerHTML = `
                        <input type="text" name="MatchingItems" placeholder="عنصر جديد" required>
                        <button type="button" class="remove-option"><i class="fas fa-times"></i></button>
                    `;
                } else {
                    optionItem.innerHTML = `
                        <input type="text" name="MatchingAnswers" placeholder="إجابة جديدة" required>
                        <button type="button" class="remove-option"><i class="fas fa-times"></i></button>
                    `;
                }
            }

            optionsList.appendChild(optionItem);

            // Add event listener to remove button
            optionItem.querySelector(".remove-option").addEventListener("click", () => removeOption(optionItem.querySelector(".remove-option")));
        }


        // Remove option
        function removeOption(button) {
            const optionItem = button.closest(".option-item");
            if (optionItem) {
                optionItem.remove();
            }
        }

        // Handle form submission
        function handleFormSubmit(e) {
            e.preventDefault();

            const questionData = {
                id: document.getElementById("questionId").value || Date.now().toString(),
                type: questionTypeSelect.value,
                text: document.getElementById("questionText").value,
                category: document.getElementById("questionCategory").value,
                options: [],
                correctAnswer: null,
                pairs: [],
                letters: [],
                correctWord: ""
            };

            fetch('/Admin/SaveQuestion', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(questionData)
            })
                .then(response => {
                    if (!response.ok) throw new Error("Failed to save question");
                    return response.json();
                })
                .then(data => {
                    console.log("Saved successfully:", data);
                    showToast();
                    questionForm.reset();
                })

                .catch(async (error) => {
                    const errorText = await error.text?.() || error.message;
                    console.error("Error saving question:", errorText);
                    alert("حدث خطأ أثناء حفظ السؤال. حاول مرة أخرى.");
                });

            // Reset form
            e.target.reset();
        }
        function showToast(message = "تم حفظ السؤال بنجاح!") {
            const toast = document.getElementById("toast");
            toast.textContent = message;
            toast.classList.add("show");

            setTimeout(() => {
                toast.classList.remove("show");
            }, 3000); // Toast disappears after 3 seconds
        }

    </script>
</body>
</html>